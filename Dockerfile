# =================================================================
# Dockerfile النهائي لمشروع ترجمة لغة الإشارة
# =================================================================

# 1. استخدام صورة Python رسمية كأساس
FROM python:3.9-slim

# 2. إضافة حجة بناء لإبطال ذاكرة التخزين المؤقت
# هذا يضمن أن يتم سحب أحدث نسخة من الكود في كل مرة يتم فيها النشر
ARG CACHE_BUSTER=1

# 3. إعداد متغير بيئة لمنع apt من طلب إدخال تفاعلي
ENV DEBIAN_FRONTEND=noninteractive

# 4. تحديد مجلد العمل داخل الحاوية
WORKDIR /app

# 5. تثبيت جميع اعتماديات نظام التشغيل التي تحتاجها OpenCV و gTTS
RUN apt-get update && apt-get install -y \
    libgl1 \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    ffmpeg \
    && rm -rf /var/lib/apt/lists/*

# 6. نسخ ملف المتطلبات أولاً للاستفادة من ذاكرة التخزين المؤقت
COPY requirements.txt .

# 7. تثبيت مكتبات Python
RUN pip install --no-cache-dir --timeout=1000 -r requirements.txt

# 8. إبطال ذاكرة التخزين المؤقت قبل نسخ باقي الملفات
# هذا السطر يجبر Docker على إعادة تنفيذ الخطوات التالية دائماً
RUN echo "Cache buster value: $CACHE_BUSTER"

# 9. نسخ باقي ملفات المشروع (بما في ذلك app.py المحدث)
COPY . .

# 10. تحديد المنفذ الذي سيعمل عليه التطبيق داخل الحاوية
EXPOSE 8000

# 11. الأمر النهائي لتشغيل التطبيق باستخدام خادم الإنتاج Gunicorn
# --bind: يحدد المنفذ 8000 لتجنب التعارض
# --workers: عدد العمليات (يمكن زيادته لاحقاً)
# --timeout: مهلة أطول لمعالجة الصور الكبيرة
# --preload: تحميل النموذج مرة واحدة فقط عند بدء التشغيل لتحسين الأداء والاستقرار
CMD ["gunicorn", "--workers", "1", "--bind", "0.0.0.0:8000", "--timeout", "300", "--preload", "app:app"]
